version: "3.3" 
services:
  traefik:
    image: "traefik:v2.7"
    container_name: "traefik"
    networks:
      - backend
      - frontend
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "traefik.http.middlewares.testHeader.headers.customrequestheaders.Access-Control-Allow-Origin: http://gitter.localhost"
      - "traefik.http.middlewares.testHeader.headers.customrequestheaders.Access-Control-Allow-Credentials: true"

    ports:
      - "80:80"
      - "8082:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  app:
    build: 
      context: ${APP_FOLDER}
      dockerfile: Dockerfile
      args:
        - PORT=3000
      cache_from:
        - "node:lts-alpine3.15"
    entrypoint: npm
    command: start
    container_name: gitter-app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gitter-app.rule=Host(`gitter.localhost`)"
      - "traefik.http.routers.gitter-app.entrypoints=web"
    ports:
      - "3000:3000"
    networks:
      - frontend
    environment:
      - SOCIAL_API_HOST=social-api
      - CHOKIDAR_USEPOLLING=true
      - SOCIAL_API_PORT=3002
      - REACT_APP_API_URL=http://api.gitter.localhost
    volumes:
      - ./app:/app
      - /app/node_modules
      - ./configs/gitter-app/keycloak.json:/app/public/keycloak.json

  code-api:
    build: 
      context: ${CODE_API_FOLDER}
      dockerfile: Dockerfile
      cache_from:
        - "node:alpine3.14"
    entrypoint: "ts-node-dev"
    container_name: code-api
    command: 
      - --respawn
      - main.ts
    ports:
      - "3001:3001"
    networks:
      - "backend"
    environment:
      - OPENFAAS_URL=https://dev.gitter.uk/
      - OPENFAAS_USER=admin
      - OPENFAAS_PASSWORD=admin
      - MINIO_HOST=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=code
      - API_PORT=3001
    volumes:
      - ./code-api:/app
      - /app/node_modules
  minio:
    image: quay.io/minio/minio
    container_name: minio
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - backend
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ./data/minio:/data
  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    networks:
      - backend
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000/ minioadmin minioadmin;
      /usr/bin/mc mb myminio/code;
      /usr/bin/mc version enable myminio/code;
      /usr/bin/mc mb myminio/images;
      /usr/bin/mc version enable myminio/images;
      exit 0;
      "
  keycloak:
    image: quay.io/keycloak/keycloak:18.0.0
    container_name: keycloak
    hostname: gitter.localhost
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`gitter.localhost`) && PathPrefix(`/auth`)"
      - "traefik.http.routers.keycloak.entrypoints=web"
    entrypoint: /tmp/keycloak/config/entrypoint.sh
    command: 
      - 'start-dev'
      - '--log-level=debug'
      - '--hostname=gitter.localhost'
      - '--http-port=8080'
      - '--http-enabled=true'
      - '--http-relative-path=/auth'
      - '--db=postgres'
      - '--db-url=jdbc:postgresql://keycloak-db/keycloak'
      - '--db-username=keycloak'
      - '--db-password=password'
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      SOCIAL_API_URL: http://social-api:8081
      PROXY_ADDRESS_FORWARDING: "true"
      KEYCLOAK_IMPORT: /tmp/keycloak/config/realm.json
      KC_FEATURES: token-exchange
    volumes:
      - ./keycloak-event-listener/target/keycloak-event-listener-0.0.1.jar:/opt/keycloak/providers/keycloak-event-listener-0.0.1.jar
      - ./configs/keycloak:/tmp/keycloak/config/
    depends_on:
      - keycloak-db
    networks:
      - backend
    ports:
      - 8080:8080

  keycloak-db:
    image: postgres
    restart: on-failure
    container_name: keycloak-db
    hostname: keycloak-db 
    networks:
      - backend
    ports:
      - "5431:5432"
    environment:
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=keycloak
    volumes:
      - ./data/keycloak:/var/lib/postgresql/data

  social-api:
    build: 
      context: ${SOCIAL_API_FOLDER}
      dockerfile: Dockerfile
      cache_from:
        - "maven:3.6.3-openjdk-17-slim"
        - "openjdk:18.0.1-jdk"
    # entrypoint: java
    # command:
    # - -jar
    # - -Dspring.profiles.active=dev
    # - /usr/src/app/social-api-0.0.1-SNAPSHOT.jar
    container_name: social-api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.social-api.rule=Host(`api.gitter.localhost`)"
      - "traefik.http.routers.social-api.entrypoints=web"
    ports:
      - "3002:8081"
    networks:
      - backend
      - frontend
    depends_on:
      - social-db
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - APP_URL=http://gitter.localhost
      - APPLICATION_URL=http://api.gitter.localhost
      - CODE_API_URL=http://code-api:3001
      - KEYCLOAK_REALM_NAME=gitter
      - KEYCLOAK_SERVER_URL=http://gitter.localhost/auth
      - KEYCLOAK_PROXY_URL=http://traefik:80
      - KEYCLOAK_CLIENT_ID=api-social
      - KEYCLOAK_CLIENT_SECRET=p5qF946qR025nFFuohYvPbIgR9WE94SH
      - MINIO_URL=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - BUCKET_PICTURE_NAME=images
      - SERVER_PORT=8081
      - API_CONTEXT_PATH=/api/*
      - LOG_LEVEL=INFO
    volumes:
      - ./social-api:/app
      
  social-db:
    image: postgres
    restart: on-failure
    container_name: social-db
    hostname:  ${DATABASE_HOSTNAME}
    networks:
      - "backend"
    ports:
      - "${DATABASE_PORT}:5432"
    environment:
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
    volumes:
      - ./data/social:/var/lib/postgresql/data

networks:
  frontend:
  backend:
